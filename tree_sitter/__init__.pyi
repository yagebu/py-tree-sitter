from typing import List
from typing import Optional
from typing import Tuple

Position = Tuple[int, int]

class TreeCursor:
    node: "Node"
    def goto_parent(self) -> bool: ...
    def goto_first_child(self) -> bool: ...
    def goto_next_sibling(self) -> bool: ...
    def current_field_name(self) -> Optional[str]: ...

class Node:
    type: str
    is_named: bool
    has_changes: bool
    start_byte: int
    start_point: Position
    end_byte: int
    end_point: Position
    children: List["Node"]
    def child_by_field_name(self, name: str) -> Optional["Node"]: ...
    def child_by_field_id(self, id: int) -> Optional["Node"]: ...
    def sexp(self) -> str: ...
    def walk(self) -> TreeCursor: ...

class Tree:
    root_node: Node
    def walk(self) -> TreeCursor: ...
    def edit(
        self,
        start_byte: int,
        old_end_byte: int,
        new_end_byte: int,
        start_point: Position,
        old_end_point: Position,
        new_end_point: Position,
    ) -> None: ...

class Query:
    def captures(self, node: Node) -> List[Tuple[Node, str]]: ...

class Language:
    def __init__(self, path: str, name: str) -> None: ...
    def field_id_for_name(self, name: str) -> Optional[int]: ...
    def query(self, query: str) -> Query: ...
    @staticmethod
    def build_library(output_path: str, repo_paths: List[str]): ...

class Parser:
    def set_language(self, lang: Language) -> None: ...
    def parse(self, contents: bytes, old_tree: Tree = None) -> Tree: ...
